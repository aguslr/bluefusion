name: Build image

on:
  schedule:
    - cron: '20 21 * * *'  # 9:20pm everyday
  pull_request:
    branches:
      - main
    paths:
      - .github/workflows/*.yml
      - Containerfile*
      - rootfs/**
  push:
    branches:
      - main
    paths:
      - .github/workflows/*.yml
      - Containerfile*
      - rootfs/**
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ github.event.repository.name }}
  REGISTRY_URL: ghcr.io
  REGISTRY_USERNAME: ${{ github.repository_owner }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        major_version: [40]
        include:
          - major_version: 40
            is_latest: true
            is_stable: true

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Git commit timestamps
        run: echo "TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV

      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_URL }}/${{ env.REGISTRY_USERNAME }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          labels: |
            org.opencontainers.image.description=${{ github.event.repository.description }}
          tags: |
            type=semver,pattern={{version}}
            type=sha,prefix=sha256-
            type=raw,value=${{ matrix.major_version }},enable=${{ github.event_name != 'pull_request' && matrix.major_version != '' }}
            type=raw,value=latest,enable=${{ github.event_name != 'pull_request' && matrix.is_latest == true }}
            type=raw,value=stable,enable=${{ github.event_name != 'pull_request' && matrix.is_stable == true }}
            type=ref,suffix=-${{ matrix.major_version }},event=pr,enable=${{ github.event_name == 'pull_request' }}
            type=schedule,pattern={{date 'YYYYMMDD'}},enable=${{ github.event_name != 'pull_request' && matrix.is_stable == true }}
            type=schedule,prefix=${{ matrix.major_version }}-,pattern={{date 'YYYYMMDD'}},enable=${{ github.event_name == 'schedule' }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image
        id: build-and-push
        uses: docker/build-push-action@v5
        env:
          ACTIONS_RUNTIME_TOKEN: ''
          SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }}
        with:
          file: |
            ./Containerfile
          build-args: |
            FEDORA_MAJOR_VERSION=${{ matrix.major_version }}
          platforms: linux/amd64,linux/arm64
          provenance: false
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.1.2

      - name: Sign container image
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY_URL }}/${{ env.REGISTRY_USERNAME }}/${{ env.IMAGE_NAME }}@${TAGS}
        env:
          TAGS: ${{ steps.build-and-push.outputs.digest }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_KEY }}
          COSIGN_EXPERIMENTAL: false

      - name: Echo outputs
        run: |
          echo "${{ toJSON(steps.build-and-push.outputs) }}"
